generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  contact   String?  // Optional contact number
  password  String
  role      String   @default("user") // 'user' or 'admin'
  createdAt DateTime @default(now())
  slots     Slot[]   @relation("Slot_user")
  vehicles  Vehicle[] @relation("User_vehicles")
}

model Vehicle {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  licensePlate String   @unique
  model        String
  color        String
  type         String // New field for vehicle type
  ownerId      String   @db.ObjectId
  owner        User     @relation("User_vehicles", fields: [ownerId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  slots            Slot[]           @relation("Slot_vehicle")
  parkingSessions ParkingSession[]
}

model ParkingSession {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId   String   @db.ObjectId
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  slotId      String   @db.ObjectId
  slot        Slot     @relation(fields: [slotId], references: [id])
  checkInTime DateTime @default(now())
  checkOutTime DateTime?
  duration    Int? // Duration in minutes
  fee         Int? // Calculated parking fee
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Slot {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  location        String           @unique
  status          String           @default("Available")
  type            String? // Type of vehicle allowed in this slot (car, bike, suv, van, minibus)
  reservedBy      String?          @db.ObjectId
  user            User?            @relation("Slot_user", fields: [reservedBy], references: [id])
  vehicleId       String?          @db.ObjectId
  vehicle         Vehicle?         @relation("Slot_vehicle", fields: [vehicleId], references: [id])
  bookingStart    DateTime?
  bookingEnd      DateTime?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  parkingSessions ParkingSession[]
}